@model IRControl.Models.IRSample


<div class="page-header">
    <h1>
        IR Control<br><small>New IR-code</small>
    </h1>
</div>

@if (ViewBag.waitForIRCode && !ViewBag.irCodeStored)
{
    <h4>Waiting for IR-code</h4><br>
}

@if (ViewBag.waitForIRCode)
{
    @Html.ActionLink("Stop waiting", "CancelReadNewSample", null, new { @class = "btn btn-default", @role = "button" })
}
else
{
    @Html.ActionLink("Read new code", "ReadNewSample", null, new { @class = "btn btn-primary", @role = "button" })
}



@if (ViewBag.irCodeStored && Model != null)
{
    <br>
    <br>
    <div class="row">
        <div class="col-sm-6">
            <div class="panel panel-default">
                <div class="panel-heading">IR code</div>
                <div class="panel-body">

                    @using (Html.BeginForm())
                {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">


                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <div class="form-group">
                                @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-sm-4" })
                                <div class="col-sm-6">
                                    @Model.Type
                                </div>
                            </div>
                            @Html.HiddenFor(model => model.Type, new { htmlAttributes = new { @class = "form-control" } })


                            <div class="form-group">
                                @Html.LabelFor(model => model.Length, htmlAttributes: new { @class = "control-label col-sm-4" })
                                <div class="col-sm-6">
                                    @Model.Length
                                </div>
                            </div>
                            @Html.HiddenFor(model => model.Length, new { htmlAttributes = new { @class = "form-control" } })


                            <div class="form-group">
                                @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-sm-4" })
                                <div class="col-sm-6">
                                    @Model.Value
                                </div>
                            </div>
                            @Html.HiddenFor(model => model.Value, new { htmlAttributes = new { @class = "form-control" } })


                            <div class="form-group">
                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-sm-4" })
                                <div class="col-sm-6">
                                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-sm-offset-4 col-sm-6">
                                    <input type="submit" value="Save" class="btn btn-default" />
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
            </div>

            }


